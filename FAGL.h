#ifndef FAGL_CORE_H
#define FAGL_CORE_H

#include <string>
#include <vector>
#include <fstream>
#include <iostream>

#include <GL/glew.h>
#include <GLFW/glfw3.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>

#define _USE_MATH_DEFINES
#include <math.h>

namespace fagl {

	typedef GLuint FAGLprogram;
	typedef GLuint FAGLshader;
	typedef GLint FAGLuniform;
	typedef GLuint FAGLtexture;
	typedef GLuint FAGLbuffer;
	typedef GLuint FAGLframebuffer;
	typedef GLuint FAGLrenderbuffer;
	typedef GLuint FAGLvertexarrar;

	enum class COLOR {
		WHITE, SILVER, GRAY, BLACK, RED, MAROON, YELLOW, OLIVE, LIME, GREEN, AQUA, TEAL, BLUE, NAVY, FUCHSIA, PURPLE
	};

	enum class ATTRIBUTE_TYPE {
		POSITION, NORMAL, TEXTURE, AMBIENT_COLOR, DIFFUSE_COLOR, SPECULAR_COLOR, TRANSPERANCY, DENSITY, ILLUMINATION_MODEL,
		CUSTOM_VEC1_0, CUSTOM_VEC1_1, CUSTOM_VEC1_2, CUSTOM_VEC1_3, CUSTOM_VEC1_4,
		CUSTOM_VEC2_0, CUSTOM_VEC2_1, CUSTOM_VEC2_2, CUSTOM_VEC2_3, CUSTOM_VEC2_4,
		CUSTOM_VEC3_0, CUSTOM_VEC3_1, CUSTOM_VEC3_2, CUSTOM_VEC3_3, CUSTOM_VEC3_4,
		CUSTOM_VEC4_0, CUSTOM_VEC4_1, CUSTOM_VEC4_2, CUSTOM_VEC4_3, CUSTOM_VEC4_4,
		CUSTOM_MATERIAL_VEC1_0, CUSTOM_MATERIAL_VEC1_1, CUSTOM_MATERIAL_VEC1_2, CUSTOM_MATERIAL_VEC1_3, CUSTOM_MATERIAL_VEC1_4,
		CUSTOM_MATERIAL_VEC2_0, CUSTOM_MATERIAL_VEC2_1, CUSTOM_MATERIAL_VEC2_2, CUSTOM_MATERIAL_VEC2_3, CUSTOM_MATERIAL_VEC2_4,
		CUSTOM_MATERIAL_VEC3_0, CUSTOM_MATERIAL_VEC3_1, CUSTOM_MATERIAL_VEC3_2, CUSTOM_MATERIAL_VEC3_3, CUSTOM_MATERIAL_VEC3_4,
		CUSTOM_MATERIAL_VEC4_0, CUSTOM_MATERIAL_VEC4_1, CUSTOM_MATERIAL_VEC4_2, CUSTOM_MATERIAL_VEC4_3, CUSTOM_MATERIAL_VEC4_4
	};

	enum class CAMERA_VECTOR {
		UP_VECTOR, GAZE_VECTOR, RIGHT_VECTOR
	};

	enum class BIND_TEXTURE_TARGET : unsigned int {
		TEXTURE_1D = GL_TEXTURE_1D, TEXTURE_2D = GL_TEXTURE_2D, TEXTURE_3D = GL_TEXTURE_3D, TEXTURE_1D_ARRAY = GL_TEXTURE_1D_ARRAY, TEXTURE_2D_ARRAY = GL_TEXTURE_2D_ARRAY, TEXTURE_RECTANGLE = GL_TEXTURE_RECTANGLE, TEXTURE_CUBE_MAP = GL_TEXTURE_CUBE_MAP, TEXTURE_CUBE_MAP_ARRAY = GL_TEXTURE_CUBE_MAP_ARRAY, TEXTURE_BUFFER = GL_TEXTURE_BUFFER, TEXTURE_2D_MULTISAMPLE = GL_TEXTURE_2D_MULTISAMPLE, TEXTURE_2D_MULTISAMPLE_ARRAY = GL_TEXTURE_2D_MULTISAMPLE_ARRAY
	};

	enum class TEXTURE_PARAMETER_TARGET : unsigned int {
		TEXTURE_1D = GL_TEXTURE_1D, TEXTURE_1D_ARRAY = GL_TEXTURE_1D_ARRAY, TEXTURE_2D = GL_TEXTURE_2D, TEXTURE_2D_ARRAY = GL_TEXTURE_2D_ARRAY, TEXTURE_2D_MULTISAMPLE = GL_TEXTURE_2D_MULTISAMPLE, TEXTURE_2D_MULTISAMPLE_ARRAY = GL_TEXTURE_2D_MULTISAMPLE_ARRAY, TEXTURE_3D = GL_TEXTURE_3D, TEXTURE_CUBE_MAP = GL_TEXTURE_CUBE_MAP, TEXTURE_CUBE_MAP_ARRAY = GL_TEXTURE_CUBE_MAP_ARRAY, TEXTURE_RECTANGLE = GL_TEXTURE_RECTANGLE
	};

	enum class TEXTURE_PARAMETER_NAME : unsigned int {
		DEPTH_STENCIL_TEXTURE_MODE = GL_DEPTH_STENCIL_TEXTURE_MODE, TEXTURE_BASE_LEVEL = GL_TEXTURE_BASE_LEVEL, TEXTURE_COMPARE_FUNC = GL_TEXTURE_COMPARE_FUNC, TEXTURE_COMPARE_MODE = GL_TEXTURE_COMPARE_MODE, TEXTURE_LOD_BIAS = GL_TEXTURE_LOD_BIAS, TEXTURE_MIN_FILTER = GL_TEXTURE_MIN_FILTER, TEXTURE_MAG_FILTER = GL_TEXTURE_MAG_FILTER, TEXTURE_MIN_LOD = GL_TEXTURE_MIN_LOD, TEXTURE_MAX_LOD = GL_TEXTURE_MAX_LOD, TEXTURE_MAX_LEVEL = GL_TEXTURE_MAX_LEVEL, TEXTURE_SWIZZLE_R = GL_TEXTURE_SWIZZLE_R, TEXTURE_SWIZZLE_G = GL_TEXTURE_SWIZZLE_G, TEXTURE_SWIZZLE_B = GL_TEXTURE_SWIZZLE_B, TEXTURE_SWIZZLE_A = GL_TEXTURE_SWIZZLE_A, TEXTURE_WRAP_S = GL_TEXTURE_WRAP_S, TEXTURE_WRAP_T = GL_TEXTURE_WRAP_T, TEXTURE_WRAP_R = GL_TEXTURE_WRAP_R, TEXTURE_BORDER_COLOR = GL_TEXTURE_BORDER_COLOR, TEXTURE_SWIZZLE_RGBA = GL_TEXTURE_SWIZZLE_RGBA
	};

	enum class PIXEL_STORE_NAME : unsigned int {
		PACK_SWAP_BYTES = GL_PACK_SWAP_BYTES, PACK_LSB_FIRST = GL_PACK_LSB_FIRST, PACK_ROW_LENGTH = GL_PACK_ROW_LENGTH, PACK_IMAGE_HEIGHT = GL_PACK_IMAGE_HEIGHT, PACK_SKIP_PIXELS = GL_PACK_SKIP_PIXELS, PACK_SKIP_ROWS = GL_PACK_SKIP_ROWS, PACK_SKIP_IMAGES = GL_PACK_SKIP_IMAGES, PACK_ALIGNMENT = GL_PACK_ALIGNMENT, UNPACK_SWAP_BYTES = GL_UNPACK_SWAP_BYTES, UNPACK_LSB_FIRST = GL_UNPACK_LSB_FIRST, UNPACK_ROW_LENGTH = GL_UNPACK_ROW_LENGTH, UNPACK_IMAGE_HEIGHT = GL_UNPACK_IMAGE_HEIGHT, UNPACK_SKIP_PIXELS = GL_UNPACK_SKIP_PIXELS, UNPACK_SKIP_ROWS = GL_UNPACK_SKIP_ROWS, UNPACK_SKIP_IMAGES = GL_UNPACK_SKIP_IMAGES, UNPACK_ALIGNMENT = GL_UNPACK_ALIGNMENT
	};

	enum class MIPMAP_TARGET : unsigned int {
		TEXTURE_1D = GL_TEXTURE_1D, TEXTURE_1D_ARRAY = GL_TEXTURE_1D_ARRAY, TEXTURE_2D = GL_TEXTURE_2D, TEXTURE_2D_ARRAY = GL_TEXTURE_2D_ARRAY, TEXTURE_2D_MULTISAMPLE = GL_TEXTURE_2D_MULTISAMPLE, TEXTURE_2D_MULTISAMPLE_ARRAY = GL_TEXTURE_2D_MULTISAMPLE_ARRAY, TEXTURE_3D = GL_TEXTURE_3D, TEXTURE_CUBE_MAP = GL_TEXTURE_CUBE_MAP, TEXTURE_CUBE_MAP_ARRAY = GL_TEXTURE_CUBE_MAP_ARRAY
	};

	enum class VERTEX_ATTRIB_POINTER_TYPE : unsigned int {
		BYTE = GL_BYTE, UNSIGNED_BYTE = GL_UNSIGNED_BYTE, SHORT = GL_SHORT, UNSIGNED_SHORT = GL_UNSIGNED_SHORT, INT = GL_INT, UNSIGNED_INT = GL_UNSIGNED_INT, HALF_FLOAT = GL_HALF_FLOAT, FLOAT = GL_FLOAT, DOUBLE = GL_DOUBLE, FIXED = GL_FIXED, INT_2_10_10_10_REV = GL_INT_2_10_10_10_REV, UNSIGNED_INT_2_10_10_10_REV = GL_UNSIGNED_INT_2_10_10_10_REV, UNSIGNED_INT_10F_11F_11F_REV = GL_UNSIGNED_INT_10F_11F_11F_REV
	};

	enum class BOOLEAN : unsigned char {
		TRUE = GL_TRUE, FALSE = GL_FALSE
	};

	enum class BIND_FRAMEBUFFER_TARGET : unsigned int {
		DRAW_FRAMEBUFFER = GL_DRAW_FRAMEBUFFER, READ_FRAMEBUFFER = GL_READ_FRAMEBUFFER, FRAMEBUFFER = GL_FRAMEBUFFER
	};

	enum class BIND_BUFFER_TARGET : unsigned int {
		ARRAY_BUFFER = GL_ARRAY_BUFFER, ATOMIC_COUNTER_BUFFER = GL_ATOMIC_COUNTER_BUFFER, COPY_READ_BUFFER = GL_COPY_READ_BUFFER, COPY_WRITE_BUFFER = GL_COPY_WRITE_BUFFER, DISPATCH_INDIRECT_BUFFER = GL_DISPATCH_INDIRECT_BUFFER, DRAW_INDIRECT_BUFFER = GL_DRAW_INDIRECT_BUFFER, ELEMENT_ARRAY_BUFFER = GL_ELEMENT_ARRAY_BUFFER, PIXEL_PACK_BUFFER = GL_PIXEL_PACK_BUFFER, PIXEL_UNPACK_BUFFER = GL_PIXEL_UNPACK_BUFFER, QUERY_BUFFER = GL_QUERY_BUFFER, SHADER_STORAGE_BUFFER = GL_SHADER_STORAGE_BUFFER, TEXTURE_BUFFER = GL_TEXTURE_BUFFER, TRANSFORM_FEEDBACK_BUFFER = GL_TRANSFORM_FEEDBACK_BUFFER, UNIFORM_BUFFER = GL_UNIFORM_BUFFER
	};

	enum class BUFFER_DATA_USAGE : unsigned int {
		STREAM_DRAW = GL_STREAM_DRAW, STREAM_READ = GL_STREAM_READ, STREAM_COPY = GL_STREAM_COPY, STATIC_DRAW = GL_STATIC_DRAW, STATIC_READ = GL_STATIC_READ, STATIC_COPY = GL_STATIC_COPY, DYNAMIC_DRAW = GL_DYNAMIC_DRAW, DYNAMIC_READ = GL_DYNAMIC_READ, DYNAMIC_COPY = GL_DYNAMIC_COPY
	};

	enum class READ_PIXEL_FORMAT : unsigned int {
		STENCIL_INDEX = GL_STENCIL_INDEX, DEPTH_COMPONENT = GL_DEPTH_COMPONENT, DEPTH_STENCIL = GL_DEPTH_STENCIL, RED = GL_RED, GREEN = GL_GREEN, BLUE = GL_BLUE, RGB = GL_RGB, BGR = GL_BGR, RGBA = GL_RGBA, BGRA = GL_BGRA
	};

	enum class READ_PIXEL_TYPE : unsigned int {
		UNSIGNED_BYTE = GL_UNSIGNED_BYTE, BYTE = GL_BYTE, UNSIGNED_SHORT = GL_UNSIGNED_SHORT, SHORT = GL_SHORT, UNSIGNED_INT = GL_UNSIGNED_INT, INT = GL_INT, HALF_FLOAT = GL_HALF_FLOAT, FLOAT = GL_FLOAT, UNSIGNED_BYTE_3_3_2 = GL_UNSIGNED_BYTE_3_3_2, UNSIGNED_BYTE_2_3_3_REV = GL_UNSIGNED_BYTE_2_3_3_REV, UNSIGNED_SHORT_5_6_5 = GL_UNSIGNED_SHORT_5_6_5, UNSIGNED_SHORT_5_6_5_REV = GL_UNSIGNED_SHORT_5_6_5_REV, UNSIGNED_SHORT_4_4_4_4 = GL_UNSIGNED_SHORT_4_4_4_4, UNSIGNED_SHORT_4_4_4_4_REV = GL_UNSIGNED_SHORT_4_4_4_4_REV, UNSIGNED_SHORT_5_5_5_1 = GL_UNSIGNED_SHORT_5_5_5_1, UNSIGNED_SHORT_1_5_5_5_REV = GL_UNSIGNED_SHORT_1_5_5_5_REV, UNSIGNED_INT_8_8_8_8 = GL_UNSIGNED_INT_8_8_8_8, UNSIGNED_INT_8_8_8_8_REV = GL_UNSIGNED_INT_8_8_8_8_REV, UNSIGNED_INT_10_10_10_2 = GL_UNSIGNED_INT_10_10_10_2, UNSIGNED_INT_2_10_10_10_REV = GL_UNSIGNED_INT_2_10_10_10_REV, UNSIGNED_INT_24_8 = GL_UNSIGNED_INT_24_8, UNSIGNED_INT_10F_11F_11F_REV = GL_UNSIGNED_INT_10F_11F_11F_REV, UNSIGNED_INT_5_9_9_9_REV = GL_UNSIGNED_INT_5_9_9_9_REV, FLOAT_32_UNSIGNED_INT_24_8_REV = GL_FLOAT_32_UNSIGNED_INT_24_8_REV
	};

	enum class ENABLE_CAPABILITY : unsigned int {
		BLEND = GL_BLEND, CLIP_DISTANCE0 = GL_CLIP_DISTANCE0, CLIP_DISTANCE1 = GL_CLIP_DISTANCE1, CLIP_DISTANCE2 = GL_CLIP_DISTANCE2, CLIP_DISTANCE3 = GL_CLIP_DISTANCE3, CLIP_DISTANCE4 = GL_CLIP_DISTANCE4, CLIP_DISTANCE5 = GL_CLIP_DISTANCE5, COLOR_LOGIC_OP = GL_COLOR_LOGIC_OP, CULL_FACE = GL_CULL_FACE, DEBUG_OUTPUT = GL_DEBUG_OUTPUT, DEBUG_OUTPUT_SYNCHRONOUS = GL_DEBUG_OUTPUT_SYNCHRONOUS, DEPTH_CLAMP = GL_DEPTH_CLAMP, DEPTH_TEST = GL_DEPTH_TEST, DITHER = GL_DITHER, FRAMEBUFFER_SRGB = GL_FRAMEBUFFER_SRGB, LINE_SMOOTH = GL_LINE_SMOOTH, MULTISAMPLE = GL_MULTISAMPLE, POLYGON_OFFSET_FILL = GL_POLYGON_OFFSET_FILL, POLYGON_OFFSET_LINE = GL_POLYGON_OFFSET_LINE, POLYGON_OFFSET_POINT = GL_POLYGON_OFFSET_POINT, POLYGON_SMOOTH = GL_POLYGON_SMOOTH, PRIMITIVE_RESTART = GL_PRIMITIVE_RESTART, PRIMITIVE_RESTART_FIXED_INDEX = GL_PRIMITIVE_RESTART_FIXED_INDEX, RASTERIZER_DISCARD = GL_RASTERIZER_DISCARD, SAMPLE_ALPHA_TO_COVERAGE = GL_SAMPLE_ALPHA_TO_COVERAGE, SAMPLE_ALPHA_TO_ONE = GL_SAMPLE_ALPHA_TO_ONE, SAMPLE_COVERAGE = GL_SAMPLE_COVERAGE, SAMPLE_SHADING = GL_SAMPLE_SHADING, SAMPLE_MASK = GL_SAMPLE_MASK, SCISSOR_TEST = GL_SCISSOR_TEST, STENCIL_TEST = GL_STENCIL_TEST, TEXTURE_CUBE_MAP_SEAMLESS = GL_TEXTURE_CUBE_MAP_SEAMLESS, PROGRAM_POINT_SIZE = GL_PROGRAM_POINT_SIZE
	};

	enum class DRAW_MODE : unsigned int {
		POINTS = GL_POINTS, LINE_STRIP = GL_LINE_STRIP, LINE_LOOP = GL_LINE_LOOP, LINES = GL_LINES, LINE_STRIP_ADJACENCY = GL_LINE_STRIP_ADJACENCY, LINES_ADJACENCY = GL_LINES_ADJACENCY, TRIANGLE_STRIP = GL_TRIANGLE_STRIP, TRIANGLE_FAN = GL_TRIANGLE_FAN, TRIANGLES = GL_TRIANGLES, TRIANGLE_STRIP_ADJACENCY = GL_TRIANGLE_STRIP_ADJACENCY, TRIANGLES_ADJACENCY = GL_TRIANGLES_ADJACENCY, PATCHES = GL_PATCHES
	};

	enum class DRAW_TYPE : unsigned int {
		UNSIGNED_BYTE = GL_UNSIGNED_BYTE, UNSIGNED_SHORT = GL_UNSIGNED_SHORT, UNSIGNED_INT = GL_UNSIGNED_INT
	};

	enum class CREATE_SHADER_TYPE : unsigned int {
		COMPUTE_SHADER = GL_COMPUTE_SHADER, VERTEX_SHADER = GL_VERTEX_SHADER, TESS_CONTROL_SHADER = GL_TESS_CONTROL_SHADER, TESS_EVALUATION_SHADER = GL_TESS_EVALUATION_SHADER, GEOMETRY_SHADER = GL_GEOMETRY_SHADER, FRAGMENT_SHADER = GL_FRAGMENT_SHADER
	};

	enum class TEXTURE_IMAGE_3D_TARGET : unsigned int {
		TEXTURE_3D = GL_TEXTURE_3D, PROXY_TEXTURE_3D = GL_PROXY_TEXTURE_3D, TEXTURE_2D_ARRAY = GL_TEXTURE_2D_ARRAY, PROXY_TEXTURE_2D_ARRAY = GL_PROXY_TEXTURE_2D_ARRAY
	};

	enum class TEXTURE_IMAGE_2D_TARGET : unsigned int {
		TEXTURE_2D = GL_TEXTURE_2D, PROXY_TEXTURE_2D = GL_PROXY_TEXTURE_2D, TEXTURE_1D_ARRAY = GL_TEXTURE_1D_ARRAY, PROXY_TEXTURE_1D_ARRAY = GL_PROXY_TEXTURE_1D_ARRAY, TEXTURE_RECTANGLE = GL_TEXTURE_RECTANGLE, PROXY_TEXTURE_RECTANGLE = GL_PROXY_TEXTURE_RECTANGLE, TEXTURE_CUBE_MAP_POSITIVE_X = GL_TEXTURE_CUBE_MAP_POSITIVE_X, TEXTURE_CUBE_MAP_NEGATIVE_X = GL_TEXTURE_CUBE_MAP_NEGATIVE_X, TEXTURE_CUBE_MAP_POSITIVE_Y = GL_TEXTURE_CUBE_MAP_POSITIVE_Y, TEXTURE_CUBE_MAP_NEGATIVE_Y = GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, TEXTURE_CUBE_MAP_POSITIVE_Z = GL_TEXTURE_CUBE_MAP_POSITIVE_Z, TEXTURE_CUBE_MAP_NEGATIVE_Z = GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, PROXY_TEXTURE_CUBE_MAP = GL_PROXY_TEXTURE_CUBE_MAP
	};

	enum class TEXTURE_IMAGE_1D_TARGET : unsigned int {
		TEXTURE_1D = GL_TEXTURE_1D, PROXY_TEXTURE_1D = GL_PROXY_TEXTURE_1D
	};

	enum class TEXTURE_SUB_3D_TARGET : unsigned int {
		TEXTURE_3D = GL_TEXTURE_3D, TEXTURE_2D_ARRAY = GL_TEXTURE_2D_ARRAY
	};

	enum class TEXTURE_SUB_2D_TARGET : unsigned int {
		TEXTURE_2D = GL_TEXTURE_2D, TEXTURE_CUBE_MAP_POSITIVE_X = GL_TEXTURE_CUBE_MAP_POSITIVE_X, TEXTURE_CUBE_MAP_NEGATIVE_X = GL_TEXTURE_CUBE_MAP_NEGATIVE_X, TEXTURE_CUBE_MAP_POSITIVE_Y = GL_TEXTURE_CUBE_MAP_POSITIVE_Y, TEXTURE_CUBE_MAP_NEGATIVE_Y = GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, TEXTURE_CUBE_MAP_POSITIVE_Z = GL_TEXTURE_CUBE_MAP_POSITIVE_Z, TEXTURE_CUBE_MAP_NEGATIVE_Z = GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, TEXTURE_1D_ARRAY = GL_TEXTURE_1D_ARRAY
	};

	enum class TEXTURE_IMAGE_FORMAT : unsigned int {
		RED = GL_RED, RG = GL_RG, RGB = GL_RGB, BGR = GL_BGR, RGBA = GL_RGBA, BGRA = GL_BGRA, RED_INTEGER = GL_RED_INTEGER, RG_INTEGER = GL_RG_INTEGER, RGB_INTEGER = GL_RGB_INTEGER, BGR_INTEGER = GL_BGR_INTEGER, RGBA_INTEGER = GL_RGBA_INTEGER, BGRA_INTEGER = GL_BGRA_INTEGER, STENCIL_INDEX = GL_STENCIL_INDEX, DEPTH_COMPONENT = GL_DEPTH_COMPONENT, DEPTH_STENCIL = GL_DEPTH_STENCIL
	};

	enum class TEXTURE_IMAGE_INTERNAL_FORMAT : int {
		DEPTH_COMPONENT = GL_DEPTH_COMPONENT, DEPTH_STENCIL = GL_DEPTH_STENCIL, RED = GL_RED, RG = GL_RG, RGB = GL_RGB, RGBA = GL_RGBA,
		R8 = GL_R8, R8_SNORM = GL_R8_SNORM, R16 = GL_R16, R16_SNORM = GL_R16_SNORM, RG8 = GL_RG8, RG8_SNORM = GL_RG8_SNORM, RG16 = GL_RG16, RG16_SNORM = GL_RG16_SNORM, R3_G3_B2 = GL_R3_G3_B2, RGB4 = GL_RGB4, RGB5 = GL_RGB5, RGB8 = GL_RGB8, RGB8_SNORM = GL_RGB8_SNORM, RGB10 = GL_RGB10, RGB12 = GL_RGB12, RGB16_SNORM = GL_RGB16_SNORM, RGBA2 = GL_RGBA2, RGBA4 = GL_RGBA4, RGB5_A1 = GL_RGB5_A1, RGBA8 = GL_RGBA8, RGBA8_SNORM = GL_RGBA8_SNORM, RGB10_A2 = GL_RGB10_A2, RGB10_A2UI = GL_RGB10_A2UI, RGBA12 = GL_RGBA12, RGBA16 = GL_RGBA16, SRGB8 = GL_SRGB8, SRGB8_ALPHA8 = GL_SRGB8_ALPHA8, R16F = GL_R16F, RG16F = GL_RG16F, RGB16F = GL_RGB16F, RGBA16F = GL_RGBA16F, R32F = GL_R32F, RG32F = GL_RG32F, RGB32F = GL_RGB32F, RGBA32F = GL_RGBA32F, R11F_G11F_B10F = GL_R11F_G11F_B10F, RGB9_E5 = GL_RGB9_E5, R8I = GL_R8I, R8UI = GL_R8UI, R16I = GL_R16I, R16UI = GL_R16UI, R32I = GL_R32I, R32UI = GL_R32UI, RG8I = GL_RG8I, RG8UI = GL_RG8UI, RG16I = GL_RG16I, RG16UI = GL_RG16UI, RG32I = GL_RG32I, RG32UI = GL_RG32UI, RGB8I = GL_RGB8I, RGB8UI = GL_RGB8UI, RGB16I = GL_RGB16I, RGB16UI = GL_RGB16UI, RGB32I = GL_RGB32I, RGB32UI = GL_RGB32UI, RGBA8I = GL_RGBA8I, RGBA8UI = GL_RGBA8UI, RGBA16I = GL_RGBA16I, RGBA16UI = GL_RGBA16UI, RGBA32I = GL_RGBA32I, RGBA32UI = GL_RGBA32UI,
		COMPRESSED_RED = GL_COMPRESSED_RED, COMPRESSED_RG = GL_COMPRESSED_RG, COMPRESSED_RGB = GL_COMPRESSED_RGB, COMPRESSED_RGBA = GL_COMPRESSED_RGBA, COMPRESSED_SRGB = GL_COMPRESSED_SRGB, COMPRESSED_SRGB_ALPHA = GL_COMPRESSED_SRGB_ALPHA, COMPRESSED_RED_RGTC1 = GL_COMPRESSED_RED_RGTC1, COMPRESSED_SIGNED_RED_RGTC1 = GL_COMPRESSED_SIGNED_RED_RGTC1, COMPRESSED_RG_RGTC2 = GL_COMPRESSED_RG_RGTC2, COMPRESSED_SIGNED_RG_RGTC2 = GL_COMPRESSED_SIGNED_RG_RGTC2, COMPRESSED_RGBA_BPTC_UNORM = GL_COMPRESSED_RGBA_BPTC_UNORM, COMPRESSED_SRGB_ALPHA_BPTC_UNORM = GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM, COMPRESSED_RGB_BPTC_SIGNED_FLOAT = GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT, COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT
	};

	enum class TEXTURE_IMAGE_TYPE : unsigned int {
		UNSIGNED_BYTE = GL_UNSIGNED_BYTE, BYTE = GL_BYTE, UNSIGNED_SHORT = GL_UNSIGNED_SHORT, SHORT = GL_SHORT, UNSIGNED_INT = GL_UNSIGNED_INT, INT = GL_INT, HALF_FLOAT = GL_HALF_FLOAT, FLOAT = GL_FLOAT, UNSIGNED_BYTE_3_3_2 = GL_UNSIGNED_BYTE_3_3_2, UNSIGNED_BYTE_2_3_3_REV = GL_UNSIGNED_BYTE_2_3_3_REV, UNSIGNED_SHORT_5_6_5 = GL_UNSIGNED_SHORT_5_6_5, UNSIGNED_SHORT_5_6_5_REV = GL_UNSIGNED_SHORT_5_6_5_REV, UNSIGNED_SHORT_4_4_4_4 = GL_UNSIGNED_SHORT_4_4_4_4, UNSIGNED_SHORT_4_4_4_4_REV = GL_UNSIGNED_SHORT_4_4_4_4_REV, UNSIGNED_SHORT_5_5_5_1 = GL_UNSIGNED_SHORT_5_5_5_1, UNSIGNED_SHORT_1_5_5_5_REV = GL_UNSIGNED_SHORT_1_5_5_5_REV, UNSIGNED_INT_8_8_8_8 = GL_UNSIGNED_INT_8_8_8_8, UNSIGNED_INT_8_8_8_8_REV = GL_UNSIGNED_INT_8_8_8_8_REV, UNSIGNED_INT_10_10_10_2 = GL_UNSIGNED_INT_10_10_10_2, UNSIGNED_INT_2_10_10_10_REV = GL_UNSIGNED_INT_2_10_10_10_REV
	};

	enum class GET_NAME : unsigned int {
		ACTIVE_TEXTURE = GL_ACTIVE_TEXTURE, ALIASED_LINE_WIDTH_RANGE = GL_ALIASED_LINE_WIDTH_RANGE, ARRAY_BUFFER_BINDING = GL_ARRAY_BUFFER_BINDING, BLEND = GL_BLEND, BLEND_COLOR = GL_BLEND_COLOR, BLEND_DST_ALPHA = GL_BLEND_DST_ALPHA, BLEND_DST_RGB = GL_BLEND_DST_RGB, BLEND_EQUATION_RGB = GL_BLEND_EQUATION_RGB, BLEND_EQUATION_ALPHA = GL_BLEND_EQUATION_ALPHA, BLEND_SRC_ALPHA = GL_BLEND_SRC_ALPHA, BLEND_SRC_RGB = GL_BLEND_SRC_RGB, COLOR_CLEAR_VALUE = GL_COLOR_CLEAR_VALUE, COLOR_LOGIC_OP = GL_COLOR_LOGIC_OP, COLOR_WRITEMASK = GL_COLOR_WRITEMASK, COMPRESSED_TEXTURE_FORMATS = GL_COMPRESSED_TEXTURE_FORMATS, MAX_COMPUTE_SHADER_STORAGE_BLOCKS = GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS, MAX_COMBINED_SHADER_STORAGE_BLOCKS = GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS, MAX_COMPUTE_UNIFORM_BLOCKS = GL_MAX_COMPUTE_UNIFORM_BLOCKS, MAX_COMPUTE_TEXTURE_IMAGE_UNITS = GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS, MAX_COMPUTE_UNIFORM_COMPONENTS = GL_MAX_COMPUTE_UNIFORM_COMPONENTS, MAX_COMPUTE_ATOMIC_COUNTERS = GL_MAX_COMPUTE_ATOMIC_COUNTERS, MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS, MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS, MAX_COMPUTE_WORK_GROUP_INVOCATIONS = GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS, MAX_COMPUTE_WORK_GROUP_COUNT = GL_MAX_COMPUTE_WORK_GROUP_COUNT, MAX_COMPUTE_WORK_GROUP_SIZE = GL_MAX_COMPUTE_WORK_GROUP_SIZE, DISPATCH_INDIRECT_BUFFER_BINDING = GL_DISPATCH_INDIRECT_BUFFER_BINDING, MAX_DEBUG_GROUP_STACK_DEPTH = GL_MAX_DEBUG_GROUP_STACK_DEPTH, DEBUG_GROUP_STACK_DEPTH = GL_DEBUG_GROUP_STACK_DEPTH, CONTEXT_FLAGS = GL_CONTEXT_FLAGS, CULL_FACE = GL_CULL_FACE, CULL_FACE_MODE = GL_CULL_FACE_MODE, CURRENT_PROGRAM = GL_CURRENT_PROGRAM, DEPTH_CLEAR_VALUE = GL_DEPTH_CLEAR_VALUE, DEPTH_FUNC = GL_DEPTH_FUNC, DEPTH_RANGE = GL_DEPTH_RANGE, DEPTH_TEST = GL_DEPTH_TEST, DEPTH_WRITEMASK = GL_DEPTH_WRITEMASK, DITHER = GL_DITHER, DOUBLEBUFFER = GL_DOUBLEBUFFER, DRAW_BUFFER = GL_DRAW_BUFFER, DRAW_BUFFER0 = GL_DRAW_BUFFER0, DRAW_BUFFER1 = GL_DRAW_BUFFER1, DRAW_BUFFER2 = GL_DRAW_BUFFER2, DRAW_BUFFER3 = GL_DRAW_BUFFER3, DRAW_BUFFER4 = GL_DRAW_BUFFER4, DRAW_BUFFER5 = GL_DRAW_BUFFER5, DRAW_BUFFER6 = GL_DRAW_BUFFER6, DRAW_BUFFER7 = GL_DRAW_BUFFER7, DRAW_BUFFER8 = GL_DRAW_BUFFER8, DRAW_BUFFER9 = GL_DRAW_BUFFER9, DRAW_BUFFER10 = GL_DRAW_BUFFER10, DRAW_BUFFER11 = GL_DRAW_BUFFER11, DRAW_BUFFER12 = GL_DRAW_BUFFER12, DRAW_BUFFER13 = GL_DRAW_BUFFER13, DRAW_BUFFER14 = GL_DRAW_BUFFER14, DRAW_BUFFER15 = GL_DRAW_BUFFER15, DRAW_FRAMEBUFFER_BINDING = GL_DRAW_FRAMEBUFFER_BINDING, READ_FRAMEBUFFER_BINDING = GL_READ_FRAMEBUFFER_BINDING, ELEMENT_ARRAY_BUFFER_BINDING = GL_ELEMENT_ARRAY_BUFFER_BINDING, FRAGMENT_SHADER_DERIVATIVE_HINT = GL_FRAGMENT_SHADER_DERIVATIVE_HINT, IMPLEMENTATION_COLOR_READ_FORMAT = GL_IMPLEMENTATION_COLOR_READ_FORMAT, IMPLEMENTATION_COLOR_READ_TYPE = GL_IMPLEMENTATION_COLOR_READ_TYPE, LINE_SMOOTH = GL_LINE_SMOOTH, LINE_SMOOTH_HINT = GL_LINE_SMOOTH_HINT, LINE_WIDTH = GL_LINE_WIDTH, LAYER_PROVOKING_VERTEX = GL_LAYER_PROVOKING_VERTEX, LOGIC_OP_MODE = GL_LOGIC_OP_MODE, MAJOR_VERSION = GL_MAJOR_VERSION, MAX_3D_TEXTURE_SIZE = GL_MAX_3D_TEXTURE_SIZE, MAX_ARRAY_TEXTURE_LAYERS = GL_MAX_ARRAY_TEXTURE_LAYERS, MAX_CLIP_DISTANCES = GL_MAX_CLIP_DISTANCES, MAX_COLOR_TEXTURE_SAMPLES = GL_MAX_COLOR_TEXTURE_SAMPLES, MAX_COMBINED_ATOMIC_COUNTERS = GL_MAX_COMBINED_ATOMIC_COUNTERS, MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS, MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS, MAX_COMBINED_TEXTURE_IMAGE_UNITS = GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS, MAX_COMBINED_UNIFORM_BLOCKS = GL_MAX_COMBINED_UNIFORM_BLOCKS, MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS, MAX_CUBE_MAP_TEXTURE_SIZE = GL_MAX_CUBE_MAP_TEXTURE_SIZE, MAX_DEPTH_TEXTURE_SAMPLES = GL_MAX_DEPTH_TEXTURE_SAMPLES, MAX_DRAW_BUFFERS = GL_MAX_DRAW_BUFFERS, MAX_DUAL_SOURCE_DRAW_BUFFERS = GL_MAX_DUAL_SOURCE_DRAW_BUFFERS, MAX_ELEMENTS_INDICES = GL_MAX_ELEMENTS_INDICES, MAX_ELEMENTS_VERTICES = GL_MAX_ELEMENTS_VERTICES, MAX_FRAGMENT_ATOMIC_COUNTERS = GL_MAX_FRAGMENT_ATOMIC_COUNTERS, MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS, MAX_FRAGMENT_INPUT_COMPONENTS = GL_MAX_FRAGMENT_INPUT_COMPONENTS, MAX_FRAGMENT_UNIFORM_COMPONENTS = GL_MAX_FRAGMENT_UNIFORM_COMPONENTS, MAX_FRAGMENT_UNIFORM_VECTORS = GL_MAX_FRAGMENT_UNIFORM_VECTORS, MAX_FRAGMENT_UNIFORM_BLOCKS = GL_MAX_FRAGMENT_UNIFORM_BLOCKS, MAX_FRAMEBUFFER_WIDTH = GL_MAX_FRAMEBUFFER_WIDTH, MAX_FRAMEBUFFER_HEIGHT = GL_MAX_FRAMEBUFFER_HEIGHT, MAX_FRAMEBUFFER_LAYERS = GL_MAX_FRAMEBUFFER_LAYERS, MAX_FRAMEBUFFER_SAMPLES = GL_MAX_FRAMEBUFFER_SAMPLES, MAX_GEOMETRY_ATOMIC_COUNTERS = GL_MAX_GEOMETRY_ATOMIC_COUNTERS, MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS, MAX_GEOMETRY_INPUT_COMPONENTS = GL_MAX_GEOMETRY_INPUT_COMPONENTS, MAX_GEOMETRY_OUTPUT_COMPONENTS = GL_MAX_GEOMETRY_OUTPUT_COMPONENTS, MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS, MAX_GEOMETRY_UNIFORM_BLOCKS = GL_MAX_GEOMETRY_UNIFORM_BLOCKS, MAX_GEOMETRY_UNIFORM_COMPONENTS = GL_MAX_GEOMETRY_UNIFORM_COMPONENTS, MAX_INTEGER_SAMPLES = GL_MAX_INTEGER_SAMPLES, MIN_MAP_BUFFER_ALIGNMENT = GL_MIN_MAP_BUFFER_ALIGNMENT, MAX_LABEL_LENGTH = GL_MAX_LABEL_LENGTH, MAX_PROGRAM_TEXEL_OFFSET = GL_MAX_PROGRAM_TEXEL_OFFSET, MIN_PROGRAM_TEXEL_OFFSET = GL_MIN_PROGRAM_TEXEL_OFFSET, MAX_RECTANGLE_TEXTURE_SIZE = GL_MAX_RECTANGLE_TEXTURE_SIZE, MAX_RENDERBUFFER_SIZE = GL_MAX_RENDERBUFFER_SIZE, MAX_SAMPLE_MASK_WORDS = GL_MAX_SAMPLE_MASK_WORDS, MAX_SERVER_WAIT_TIMEOUT = GL_MAX_SERVER_WAIT_TIMEOUT, MAX_SHADER_STORAGE_BUFFER_BINDINGS = GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS, MAX_TESS_CONTROL_ATOMIC_COUNTERS = GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS, MAX_TESS_EVALUATION_ATOMIC_COUNTERS = GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS, MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS, MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS, MAX_TEXTURE_BUFFER_SIZE = GL_MAX_TEXTURE_BUFFER_SIZE, MAX_TEXTURE_IMAGE_UNITS = GL_MAX_TEXTURE_IMAGE_UNITS, MAX_TEXTURE_LOD_BIAS = GL_MAX_TEXTURE_LOD_BIAS, MAX_TEXTURE_SIZE = GL_MAX_TEXTURE_SIZE, MAX_UNIFORM_BUFFER_BINDINGS = GL_MAX_UNIFORM_BUFFER_BINDINGS, MAX_UNIFORM_BLOCK_SIZE = GL_MAX_UNIFORM_BLOCK_SIZE, MAX_UNIFORM_LOCATIONS = GL_MAX_UNIFORM_LOCATIONS, MAX_VARYING_COMPONENTS = GL_MAX_VARYING_COMPONENTS, MAX_VARYING_VECTORS = GL_MAX_VARYING_VECTORS, MAX_VARYING_FLOATS = GL_MAX_VARYING_FLOATS, MAX_VERTEX_ATOMIC_COUNTERS = GL_MAX_VERTEX_ATOMIC_COUNTERS, MAX_VERTEX_ATTRIBS = GL_MAX_VERTEX_ATTRIBS, MAX_VERTEX_SHADER_STORAGE_BLOCKS = GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS, MAX_VERTEX_TEXTURE_IMAGE_UNITS = GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS, MAX_VERTEX_UNIFORM_COMPONENTS = GL_MAX_VERTEX_UNIFORM_COMPONENTS, MAX_VERTEX_UNIFORM_VECTORS = GL_MAX_VERTEX_UNIFORM_VECTORS, MAX_VERTEX_OUTPUT_COMPONENTS = GL_MAX_VERTEX_OUTPUT_COMPONENTS, MAX_VERTEX_UNIFORM_BLOCKS = GL_MAX_VERTEX_UNIFORM_BLOCKS, MAX_VIEWPORT_DIMS = GL_MAX_VIEWPORT_DIMS, MAX_VIEWPORTS = GL_MAX_VIEWPORTS, MINOR_VERSION = GL_MINOR_VERSION, NUM_COMPRESSED_TEXTURE_FORMATS = GL_NUM_COMPRESSED_TEXTURE_FORMATS, NUM_EXTENSIONS = GL_NUM_EXTENSIONS, NUM_PROGRAM_BINARY_FORMATS = GL_NUM_PROGRAM_BINARY_FORMATS, NUM_SHADER_BINARY_FORMATS = GL_NUM_SHADER_BINARY_FORMATS, PACK_ALIGNMENT = GL_PACK_ALIGNMENT, PACK_IMAGE_HEIGHT = GL_PACK_IMAGE_HEIGHT, PACK_LSB_FIRST = GL_PACK_LSB_FIRST, PACK_ROW_LENGTH = GL_PACK_ROW_LENGTH, PACK_SKIP_IMAGES = GL_PACK_SKIP_IMAGES, PACK_SKIP_PIXELS = GL_PACK_SKIP_PIXELS, PACK_SKIP_ROWS = GL_PACK_SKIP_ROWS, PACK_SWAP_BYTES = GL_PACK_SWAP_BYTES, PIXEL_PACK_BUFFER_BINDING = GL_PIXEL_PACK_BUFFER_BINDING, PIXEL_UNPACK_BUFFER_BINDING = GL_PIXEL_UNPACK_BUFFER_BINDING, POINT_FADE_THRESHOLD_SIZE = GL_POINT_FADE_THRESHOLD_SIZE, PRIMITIVE_RESTART_INDEX = GL_PRIMITIVE_RESTART_INDEX, PROGRAM_BINARY_FORMATS = GL_PROGRAM_BINARY_FORMATS, PROGRAM_PIPELINE_BINDING = GL_PROGRAM_PIPELINE_BINDING, PROGRAM_POINT_SIZE = GL_PROGRAM_POINT_SIZE, PROVOKING_VERTEX = GL_PROVOKING_VERTEX, POINT_SIZE = GL_POINT_SIZE, POINT_SIZE_GRANULARITY = GL_POINT_SIZE_GRANULARITY, POINT_SIZE_RANGE = GL_POINT_SIZE_RANGE, POLYGON_OFFSET_FACTOR = GL_POLYGON_OFFSET_FACTOR, POLYGON_OFFSET_UNITS = GL_POLYGON_OFFSET_UNITS, POLYGON_OFFSET_FILL = GL_POLYGON_OFFSET_FILL, POLYGON_OFFSET_LINE = GL_POLYGON_OFFSET_LINE, POLYGON_OFFSET_POINT = GL_POLYGON_OFFSET_POINT, POLYGON_SMOOTH = GL_POLYGON_SMOOTH, POLYGON_SMOOTH_HINT = GL_POLYGON_SMOOTH_HINT, READ_BUFFER = GL_READ_BUFFER, RENDERBUFFER_BINDING = GL_RENDERBUFFER_BINDING, SAMPLE_BUFFERS = GL_SAMPLE_BUFFERS, SAMPLE_COVERAGE_VALUE = GL_SAMPLE_COVERAGE_VALUE, SAMPLE_COVERAGE_INVERT = GL_SAMPLE_COVERAGE_INVERT, SAMPLE_MASK_VALUE = GL_SAMPLE_MASK_VALUE, SAMPLER_BINDING = GL_SAMPLER_BINDING, SAMPLES = GL_SAMPLES, SCISSOR_BOX = GL_SCISSOR_BOX, SCISSOR_TEST = GL_SCISSOR_TEST, SHADER_COMPILER = GL_SHADER_COMPILER, SHADER_STORAGE_BUFFER_BINDING = GL_SHADER_STORAGE_BUFFER_BINDING, SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT, SHADER_STORAGE_BUFFER_START = GL_SHADER_STORAGE_BUFFER_START, SHADER_STORAGE_BUFFER_SIZE = GL_SHADER_STORAGE_BUFFER_SIZE, SMOOTH_LINE_WIDTH_RANGE = GL_SMOOTH_LINE_WIDTH_RANGE, SMOOTH_LINE_WIDTH_GRANULARITY = GL_SMOOTH_LINE_WIDTH_GRANULARITY, STENCIL_BACK_FAIL = GL_STENCIL_BACK_FAIL, STENCIL_BACK_FUNC = GL_STENCIL_BACK_FUNC, STENCIL_BACK_PASS_DEPTH_FAIL = GL_STENCIL_BACK_PASS_DEPTH_FAIL, STENCIL_BACK_PASS_DEPTH_PASS = GL_STENCIL_BACK_PASS_DEPTH_PASS, STENCIL_BACK_REF = GL_STENCIL_BACK_REF, STENCIL_BACK_VALUE_MASK = GL_STENCIL_BACK_VALUE_MASK, STENCIL_BACK_WRITEMASK = GL_STENCIL_BACK_WRITEMASK, STENCIL_CLEAR_VALUE = GL_STENCIL_CLEAR_VALUE, STENCIL_FAIL = GL_STENCIL_FAIL, STENCIL_FUNC = GL_STENCIL_FUNC, STENCIL_PASS_DEPTH_FAIL = GL_STENCIL_PASS_DEPTH_FAIL, STENCIL_PASS_DEPTH_PASS = GL_STENCIL_PASS_DEPTH_PASS, STENCIL_REF = GL_STENCIL_REF, STENCIL_TEST = GL_STENCIL_TEST, STENCIL_VALUE_MASK = GL_STENCIL_VALUE_MASK, STENCIL_WRITEMASK = GL_STENCIL_WRITEMASK, STEREO = GL_STEREO, SUBPIXEL_BITS = GL_SUBPIXEL_BITS, TEXTURE_BINDING_1D = GL_TEXTURE_BINDING_1D, TEXTURE_BINDING_1D_ARRAY = GL_TEXTURE_BINDING_1D_ARRAY, TEXTURE_BINDING_2D = GL_TEXTURE_BINDING_2D, TEXTURE_BINDING_2D_ARRAY = GL_TEXTURE_BINDING_2D_ARRAY, TEXTURE_BINDING_2D_MULTISAMPLE = GL_TEXTURE_BINDING_2D_MULTISAMPLE, TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY, TEXTURE_BINDING_3D = GL_TEXTURE_BINDING_3D, TEXTURE_BINDING_BUFFER = GL_TEXTURE_BINDING_BUFFER, TEXTURE_BINDING_CUBE_MAP = GL_TEXTURE_BINDING_CUBE_MAP, TEXTURE_BINDING_RECTANGLE = GL_TEXTURE_BINDING_RECTANGLE, TEXTURE_COMPRESSION_HINT = GL_TEXTURE_COMPRESSION_HINT, TEXTURE_BUFFER_OFFSET_ALIGNMENT = GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT, TIMESTAMP = GL_TIMESTAMP, TRANSFORM_FEEDBACK_BUFFER_BINDING = GL_TRANSFORM_FEEDBACK_BUFFER_BINDING, TRANSFORM_FEEDBACK_BUFFER_START = GL_TRANSFORM_FEEDBACK_BUFFER_START, TRANSFORM_FEEDBACK_BUFFER_SIZE = GL_TRANSFORM_FEEDBACK_BUFFER_SIZE, UNIFORM_BUFFER_BINDING = GL_UNIFORM_BUFFER_BINDING, UNIFORM_BUFFER_OFFSET_ALIGNMENT = GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT, UNIFORM_BUFFER_SIZE = GL_UNIFORM_BUFFER_SIZE, UNIFORM_BUFFER_START = GL_UNIFORM_BUFFER_START, UNPACK_ALIGNMENT = GL_UNPACK_ALIGNMENT, UNPACK_IMAGE_HEIGHT = GL_UNPACK_IMAGE_HEIGHT, UNPACK_LSB_FIRST = GL_UNPACK_LSB_FIRST, UNPACK_ROW_LENGTH = GL_UNPACK_ROW_LENGTH, UNPACK_SKIP_IMAGES = GL_UNPACK_SKIP_IMAGES, UNPACK_SKIP_PIXELS = GL_UNPACK_SKIP_PIXELS, UNPACK_SKIP_ROWS = GL_UNPACK_SKIP_ROWS, UNPACK_SWAP_BYTES = GL_UNPACK_SWAP_BYTES, VERTEX_ARRAY_BINDING = GL_VERTEX_ARRAY_BINDING, VERTEX_BINDING_DIVISOR = GL_VERTEX_BINDING_DIVISOR, VERTEX_BINDING_OFFSET = GL_VERTEX_BINDING_OFFSET, VERTEX_BINDING_STRIDE = GL_VERTEX_BINDING_STRIDE, VERTEX_BINDING_BUFFER = GL_VERTEX_BINDING_BUFFER, MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET, MAX_VERTEX_ATTRIB_BINDINGS = GL_MAX_VERTEX_ATTRIB_BINDINGS, VIEWPORT = GL_VIEWPORT, VIEWPORT_BOUNDS_RANGE = GL_VIEWPORT_BOUNDS_RANGE, VIEWPORT_INDEX_PROVOKING_VERTEX = GL_VIEWPORT_INDEX_PROVOKING_VERTEX, VIEWPORT_SUBPIXEL_BITS = GL_VIEWPORT_SUBPIXEL_BITS, MAX_ELEMENT_INDEX = GL_MAX_ELEMENT_INDEX
	};

	enum class READ_BUFFER_MODE : unsigned int {
		FRONT_LEFT = GL_FRONT_LEFT, FRONT_RIGHT = GL_FRONT_RIGHT, BACK_LEFT = GL_BACK_LEFT, BACK_RIGHT = GL_BACK_RIGHT, FRONT = GL_FRONT, BACK = GL_BACK, LEFT = GL_LEFT, RIGHT = GL_RIGHT, COLOR_ATTACHMENT0 = GL_COLOR_ATTACHMENT0, COLOR_ATTACHMENT1 = GL_COLOR_ATTACHMENT1, COLOR_ATTACHMENT2 = GL_COLOR_ATTACHMENT2, COLOR_ATTACHMENT3 = GL_COLOR_ATTACHMENT3, COLOR_ATTACHMENT4 = GL_COLOR_ATTACHMENT4, COLOR_ATTACHMENT5 = GL_COLOR_ATTACHMENT5, COLOR_ATTACHMENT6 = GL_COLOR_ATTACHMENT6, COLOR_ATTACHMENT7 = GL_COLOR_ATTACHMENT7, COLOR_ATTACHMENT8 = GL_COLOR_ATTACHMENT8, COLOR_ATTACHMENT9 = GL_COLOR_ATTACHMENT9, COLOR_ATTACHMENT10 = GL_COLOR_ATTACHMENT10, COLOR_ATTACHMENT11 = GL_COLOR_ATTACHMENT11, COLOR_ATTACHMENT12 = GL_COLOR_ATTACHMENT12, COLOR_ATTACHMENT13 = GL_COLOR_ATTACHMENT13, COLOR_ATTACHMENT14 = GL_COLOR_ATTACHMENT14, COLOR_ATTACHMENT15 = GL_COLOR_ATTACHMENT15
	};

	enum class DEPTH_FUNC : unsigned int {
		NEVER = GL_NEVER, LESS = GL_LESS, EQUAL = GL_EQUAL, LEQUAL = GL_LEQUAL, GREATER = GL_GREATER, NOTEQUAL = GL_NOTEQUAL, GEQUAL = GL_GEQUAL, ALWAYS = GL_ALWAYS
	};

	enum class BLEND_FUNC : unsigned int {
		ZERO = GL_ZERO, ONE = GL_ONE, SRC_COLOR = GL_SRC_COLOR, ONE_MINUS_SRC_COLOR = GL_ONE_MINUS_SRC_COLOR, DST_COLOR = GL_DST_COLOR, ONE_MINUS_DST_COLOR = GL_ONE_MINUS_DST_COLOR, SRC_ALPHA = GL_SRC_ALPHA, ONE_MINUS_SRC_ALPHA = GL_ONE_MINUS_SRC_ALPHA, DST_ALPHA = GL_DST_ALPHA, ONE_MINUS_DST_ALPHA = GL_ONE_MINUS_DST_ALPHA, CONSTANT_COLOR = GL_CONSTANT_COLOR, ONE_MINUS_CONSTANT_COLOR = GL_ONE_MINUS_CONSTANT_COLOR, CONSTANT_ALPHA = GL_CONSTANT_ALPHA, ONE_MINUS_CONSTANT_ALPHA = GL_ONE_MINUS_CONSTANT_ALPHA, SRC_ALPHA_SATURATE = GL_SRC_ALPHA_SATURATE, SRC1_COLOR = GL_SRC1_COLOR, ONE_MINUS_SRC1_COLOR = GL_ONE_MINUS_SRC1_COLOR, SRC1_ALPHA = GL_SRC1_ALPHA, ONE_MINUS_SRC1_ALPHA = GL_ONE_MINUS_SRC1_ALPHA
	};

	enum class FRAMEBUFFER_TEXTURE_ATTACHMENT : unsigned int {
		COLOR_ATTACHMENT0 = GL_COLOR_ATTACHMENT0, COLOR_ATTACHMENT1 = GL_COLOR_ATTACHMENT1, COLOR_ATTACHMENT2 = GL_COLOR_ATTACHMENT2, COLOR_ATTACHMENT3 = GL_COLOR_ATTACHMENT3, COLOR_ATTACHMENT4 = GL_COLOR_ATTACHMENT4, COLOR_ATTACHMENT5 = GL_COLOR_ATTACHMENT5, COLOR_ATTACHMENT6 = GL_COLOR_ATTACHMENT6, COLOR_ATTACHMENT7 = GL_COLOR_ATTACHMENT7, COLOR_ATTACHMENT8 = GL_COLOR_ATTACHMENT8, COLOR_ATTACHMENT9 = GL_COLOR_ATTACHMENT9, COLOR_ATTACHMENT10 = GL_COLOR_ATTACHMENT10, COLOR_ATTACHMENT11 = GL_COLOR_ATTACHMENT11, COLOR_ATTACHMENT12 = GL_COLOR_ATTACHMENT12, COLOR_ATTACHMENT13 = GL_COLOR_ATTACHMENT13, COLOR_ATTACHMENT14 = GL_COLOR_ATTACHMENT14, COLOR_ATTACHMENT15 = GL_COLOR_ATTACHMENT15, DEPTH_ATTACHMENT = GL_DEPTH_ATTACHMENT, STENCIL_ATTACHMENT = GL_STENCIL_ATTACHMENT, DEPTH_STENCIL_ATTACHMENT = GL_DEPTH_STENCIL_ATTACHMENT
	};

	enum class FRAMEBUFFER_TEXTURE_2D_TEXTURE_TARGET : unsigned int {
		TEXTURE_2D = GL_TEXTURE_2D, TEXTURE_RECTANGLE = GL_TEXTURE_RECTANGLE, TEXTURE_CUBE_MAP_POSITIVE_X = GL_TEXTURE_CUBE_MAP_POSITIVE_X, TEXTURE_CUBE_MAP_NEGATIVE_X = GL_TEXTURE_CUBE_MAP_NEGATIVE_X, TEXTURE_CUBE_MAP_POSITIVE_Y = GL_TEXTURE_CUBE_MAP_POSITIVE_Y, TEXTURE_CUBE_MAP_NEGATIVE_Y = GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, TEXTURE_CUBE_MAP_POSITIVE_Z = GL_TEXTURE_CUBE_MAP_POSITIVE_Z, TEXTURE_CUBE_MAP_NEGATIVE_Z = GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, TEXTURE_2D_MULTISAMPLE = GL_TEXTURE_2D_MULTISAMPLE
	};

	enum class FRAMEBUFFER_TEXTURE_TARGET : unsigned int {
		DRAW_FRAMEBUFFER = GL_DRAW_FRAMEBUFFER, READ_FRAMEBUFFER = GL_READ_FRAMEBUFFER, FRAMEBUFFER = GL_FRAMEBUFFER
	};

	void faglEnable(ENABLE_CAPABILITY cap);

	void faglDisable(ENABLE_CAPABILITY cap);

	void faglEnablei(ENABLE_CAPABILITY cap, GLuint index);

	void faglDisablei(ENABLE_CAPABILITY cap, GLuint index);

	GLboolean faglIsEnabled(ENABLE_CAPABILITY cap);

	GLboolean faglIsEnabledi(ENABLE_CAPABILITY cap, GLuint index);

	void faglGenBuffers(GLsizei n, FAGLbuffer* buffers);

	void faglGenBuffer(FAGLbuffer* buffer);

	void faglBindBuffer(BIND_BUFFER_TARGET target, FAGLbuffer buffer);

	void faglBufferData(BIND_BUFFER_TARGET target, GLsizeiptr size, const void* data, BUFFER_DATA_USAGE usage);

	void faglNamedBufferData(FAGLbuffer buffer, GLsizeiptr size, const void* data, BUFFER_DATA_USAGE usage);

	void faglGenTextures(GLsizei n, FAGLtexture* textures);

	void faglGenTexture(FAGLtexture* texture);

	void faglGenFramebuffers(GLsizei n, FAGLframebuffer* ids);

	void faglGenFramebuffer(FAGLframebuffer* id);

	void faglBindFramebuffer(BIND_FRAMEBUFFER_TARGET target, FAGLframebuffer framebuffer);

	void faglBindFramebuffer(FAGLframebuffer framebuffer);

	void faglUnbindFramebuffer();

	void faglGenRenderbuffers(GLsizei n, FAGLrenderbuffer* renderbuffers);

	void faglGenRenderbuffer(FAGLrenderbuffer* renderbuffer);

	void faglBindRenderbuffer(FAGLrenderbuffer renderbuffer);

	void faglUnbindRenderbuffer();

	void faglTexImage3D(TEXTURE_IMAGE_3D_TARGET target, GLint level, TEXTURE_IMAGE_INTERNAL_FORMAT internalformat, GLsizei width, GLsizei height, GLsizei depth, TEXTURE_IMAGE_FORMAT format, TEXTURE_IMAGE_TYPE type, const void* data);

	void faglTexImage2D(TEXTURE_IMAGE_2D_TARGET target, GLint level, TEXTURE_IMAGE_INTERNAL_FORMAT internalformat, GLsizei width, GLsizei height, TEXTURE_IMAGE_FORMAT format, TEXTURE_IMAGE_TYPE type, const void* data);

	void faglTexImage1D(TEXTURE_IMAGE_1D_TARGET target, GLint level, TEXTURE_IMAGE_INTERNAL_FORMAT internalformat, GLsizei width, TEXTURE_IMAGE_FORMAT format, TEXTURE_IMAGE_TYPE type, const void* data);
	
	void faglTexSubImage3D(TEXTURE_SUB_3D_TARGET target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, TEXTURE_IMAGE_FORMAT format, TEXTURE_IMAGE_TYPE type, const void* pixels);

	void faglTextureSubImage3D(FAGLtexture texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, TEXTURE_IMAGE_FORMAT format, TEXTURE_IMAGE_TYPE type, const void* pixels);

	void faglTexSubImage2D(TEXTURE_SUB_2D_TARGET target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, TEXTURE_IMAGE_FORMAT format, TEXTURE_IMAGE_TYPE type, const void* pixels);

	void faglTextureSubImage2D(FAGLtexture texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, TEXTURE_IMAGE_FORMAT format, TEXTURE_IMAGE_TYPE type, const void* pixels);

	void faglTexSubImage1D(GLint level, GLint xoffset, GLsizei width, TEXTURE_IMAGE_FORMAT format, TEXTURE_IMAGE_TYPE type, const void* pixels);

	void faglTextureSubImage1D(FAGLtexture texture, GLint level, GLint xoffset, GLsizei width, TEXTURE_IMAGE_FORMAT format, TEXTURE_IMAGE_TYPE type, const void* pixels);
	
	void faglBindTexture(BIND_TEXTURE_TARGET target, FAGLtexture texture);

	void faglTexParameterf(TEXTURE_PARAMETER_TARGET target, TEXTURE_PARAMETER_NAME pname, GLfloat param);

	void faglTexParameteri(TEXTURE_PARAMETER_TARGET target, TEXTURE_PARAMETER_NAME pname, GLint param);

	void faglTextureParameterf(FAGLtexture texture, TEXTURE_PARAMETER_NAME pname, GLfloat param);

	void faglTextureParameteri(FAGLtexture texture, TEXTURE_PARAMETER_NAME pname, GLint param);

	void faglTexParameterfv(TEXTURE_PARAMETER_TARGET target, TEXTURE_PARAMETER_NAME pname, const GLfloat* params);

	void faglTexParameteriv(TEXTURE_PARAMETER_TARGET target, TEXTURE_PARAMETER_NAME pname, const GLint* params);

	void faglTexParameterIiv(TEXTURE_PARAMETER_TARGET target, TEXTURE_PARAMETER_NAME pname, const GLint* params);

	void faglTexParameterIuiv(TEXTURE_PARAMETER_TARGET target, TEXTURE_PARAMETER_NAME pname, const GLuint* params);

	void faglTextureParameterfv(FAGLtexture texture, TEXTURE_PARAMETER_NAME pname, const GLfloat* params);

	void faglTextureParameteriv(FAGLtexture texture, TEXTURE_PARAMETER_NAME pname, const GLint* params);

	void faglTextureParameterIiv(FAGLtexture texture, TEXTURE_PARAMETER_NAME pname, const GLint* params);

	void faglTextureParameterIuiv(FAGLtexture texture, TEXTURE_PARAMETER_NAME pname, const GLuint* params);

	void faglPixelStoref(PIXEL_STORE_NAME pname, GLfloat param);

	void faglPixelStorei(PIXEL_STORE_NAME pname, GLint param);

	void faglGenerateMipmap(MIPMAP_TARGET target);

	void faglGenerateTextureMipmap(FAGLtexture texture);

	FAGLprogram faglCreateProgram();

	void faglUseProgram(FAGLprogram program);

	void faglLinkProgram(FAGLprogram program);

	FAGLshader faglCreateShader(CREATE_SHADER_TYPE shaderType);

	void faglShaderSource(FAGLshader shader, GLsizei count, const GLchar** string, const GLint* length);

	void faglCompileShader(FAGLshader shader);

	void faglGetShaderInfoLog(FAGLshader shader, GLsizei maxLength, GLsizei* length, GLchar* infoLog);

	void faglReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, READ_PIXEL_FORMAT format, READ_PIXEL_TYPE type, void* data);

	void faglReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, READ_PIXEL_FORMAT format, READ_PIXEL_TYPE type, GLsizei bufSize, void* data);

	void faglReadPixels(GLsizei width, GLsizei height, READ_PIXEL_FORMAT format, READ_PIXEL_TYPE type, void* data);

	void faglReadnPixels(GLsizei width, GLsizei height, READ_PIXEL_FORMAT format, READ_PIXEL_TYPE type, GLsizei bufSize, void* data);

	FAGLuniform faglGetUniformLocation(FAGLprogram program, const GLchar* name);

	FAGLuniform faglGetUniformLocation(const GLchar* name);

	void faglGetBooleanv(GET_NAME pname, GLboolean* data);

	void faglGetDoublev(GET_NAME pname, GLdouble* data);

	void faglGetFloatv(GET_NAME pname, GLfloat* data);

	void faglGetIntegerv(GET_NAME pname, GLint* data);

	void faglGetInteger64v(GET_NAME pname, GLint64* data);

	void faglGetBooleani_v(GET_NAME target, GLuint index, GLboolean* data);

	void faglGetIntegeri_v(GET_NAME target, GLuint index, GLint* data);

	void faglGetFloati_v(GET_NAME target, GLuint index, GLfloat* data);

	void faglGetDoublei_v(GET_NAME target, GLuint index, GLdouble* data);

	void faglGetInteger64i_v(GET_NAME target, GLuint index, GLint64* data);

	void faglGenVertexArrays(GLsizei n, FAGLvertexarrar* arrays);

	void faglGenVertexArray(FAGLvertexarrar* array);

	void faglBindVertexArray(FAGLvertexarrar array);

	void faglUnbindVertexArray();

	void faglVertexAttribPointer(GLuint index, GLint size, VERTEX_ATTRIB_POINTER_TYPE type, BOOLEAN normalized, GLsizei stride, const void* pointer);

	void faglVertexAttribPointer(GLuint index, GLint size, BOOLEAN normalized, GLsizei stride, const void* pointer);

	void faglVertexAttribPointer(GLuint index, GLint size, VERTEX_ATTRIB_POINTER_TYPE type, GLsizei stride, const void* pointer);

	void faglVertexAttribPointer(GLuint index, GLint size, GLsizei stride, const void* pointer);

	void faglVertexAttribIPointer(GLuint index, GLint size, VERTEX_ATTRIB_POINTER_TYPE type, GLsizei stride, const void* pointer);

	void faglVertexAttribIPointer(GLuint index, GLint size, GLsizei stride, const void* pointer);

	void faglVertexAttribLPointer(GLuint index, GLint size, VERTEX_ATTRIB_POINTER_TYPE type, GLsizei stride, const void* pointer);

	void faglVertexAttribLPointer(GLuint index, GLint size, GLsizei stride, const void* pointer);

	void faglVertexAttribPointerC(GLuint index, GLint size, VERTEX_ATTRIB_POINTER_TYPE type, BOOLEAN normalized, GLsizei stride, const void* pointer);

	void faglVertexAttribPointerC(GLuint index, GLint size, BOOLEAN normalized, GLsizei stride, const void* pointer);

	void faglVertexAttribPointerC(GLuint index, GLint size, VERTEX_ATTRIB_POINTER_TYPE type, GLsizei stride, const void* pointer);

	void faglVertexAttribPointerC(GLuint index, GLint size, GLsizei stride, const void* pointer);

	void faglVertexAttribIPointerC(GLuint index, GLint size, VERTEX_ATTRIB_POINTER_TYPE type, GLsizei stride, const void* pointer);

	void faglVertexAttribIPointerC(GLuint index, GLint size, GLsizei stride, const void* pointer);

	void faglVertexAttribLPointerC(GLuint index, GLint size, VERTEX_ATTRIB_POINTER_TYPE type, GLsizei stride, const void* pointer);

	void faglVertexAttribLPointerC(GLuint index, GLint size, GLsizei stride, const void* pointer);

	void faglDrawArrays(DRAW_MODE mode, GLint first, GLsizei count);

	void faglDrawArrays(DRAW_MODE mode, GLsizei count);

	void faglDrawElements(DRAW_MODE mode, GLsizei count, DRAW_TYPE type, const void* indices);

	void faglAttachShader(FAGLprogram program, FAGLshader shader);

	void faglAttachShader(FAGLprogram program, GLuint count, FAGLshader*shaders);

	void faglAttachShader(FAGLprogram program, std::vector<FAGLshader> shaders);

	void faglReadBuffer(READ_BUFFER_MODE mode);

	void faglNamedFramebufferReadBuffer(FAGLframebuffer framebuffer, READ_BUFFER_MODE mode);

	void faglUniform1f(FAGLuniform location, GLfloat v0);

	void faglUniform2f(FAGLuniform location, GLfloat v0, GLfloat v1);

	void faglUniform3f(FAGLuniform location, GLfloat v0, GLfloat v1, GLfloat v2);

	void faglUniform4f(FAGLuniform location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);

	void faglUniform1i(FAGLuniform location, GLint v0);

	void faglUniform2i(FAGLuniform location, GLint v0, GLint v1);

	void faglUniform3i(FAGLuniform location, GLint v0, GLint v1, GLint v2);

	void faglUniform4i(FAGLuniform location, GLint v0, GLint v1, GLint v2, GLint v3);

	void faglUniform1ui(FAGLuniform location, GLuint v0);

	void faglUniform2ui(FAGLuniform location, GLuint v0, GLuint v1);

	void faglUniform3ui(FAGLuniform location, GLuint v0, GLuint v1, GLuint v2);

	void faglUniform4ui(FAGLuniform location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);

	void faglUniform1fv(FAGLuniform location, GLsizei count, const GLfloat* value);

	void faglUniform1fv(FAGLuniform location, const GLfloat* value);

	void faglUniform2fv(FAGLuniform location, GLsizei count, const GLfloat* value);

	void faglUniform2fv(FAGLuniform location, const GLfloat* value);

	void faglUniform3fv(FAGLuniform location, GLsizei count, const GLfloat* value);

	void faglUniform3fv(FAGLuniform location, const GLfloat* value);

	void faglUniform4fv(FAGLuniform location, GLsizei count, const GLfloat* value);

	void faglUniform4fv(FAGLuniform location, const GLfloat* value);

	void faglUniform1iv(FAGLuniform location, GLsizei count, const GLint* value);

	void faglUniform1iv(FAGLuniform location, const GLint* value);

	void faglUniform2iv(FAGLuniform location, GLsizei count, const GLint* value);

	void faglUniform2iv(FAGLuniform location, const GLint* value);

	void faglUniform3iv(FAGLuniform location, GLsizei count, const GLint* value);

	void faglUniform3iv(FAGLuniform location, const GLint* value);

	void faglUniform4iv(FAGLuniform location, GLsizei count, const GLint* value);

	void faglUniform4iv(FAGLuniform location, const GLint* value);

	void faglUniform1uiv(FAGLuniform location, GLsizei count, const GLuint* value);

	void faglUniform1uiv(FAGLuniform location, const GLuint* value);

	void faglUniform2uiv(FAGLuniform location, GLsizei count, const GLuint* value);

	void faglUniform2uiv(FAGLuniform location, const GLuint* value);

	void faglUniform3uiv(FAGLuniform location, GLsizei count, const GLuint* value);

	void faglUniform3uiv(FAGLuniform location, const GLuint* value);

	void faglUniform4uiv(FAGLuniform location, GLsizei count, const GLuint* value);

	void faglUniform4uiv(FAGLuniform location, const GLuint* value);

	void faglUniformMatrix2fv(FAGLuniform location, GLsizei count, BOOLEAN transpose, const GLfloat* value);

	void faglUniformMatrix2fv(FAGLuniform location, BOOLEAN transpose, const GLfloat* value);

	void faglUniformMatrix2fv(FAGLuniform location, GLsizei count, const GLfloat* value);

	void faglUniformMatrix2fv(FAGLuniform location, const GLfloat* value);

	void faglUniformMatrix3fv(FAGLuniform location, GLsizei count, BOOLEAN transpose, const GLfloat* value);

	void faglUniformMatrix3fv(FAGLuniform location, BOOLEAN transpose, const GLfloat* value);

	void faglUniformMatrix3fv(FAGLuniform location, GLsizei count,const GLfloat* value);

	void faglUniformMatrix3fv(FAGLuniform location, const GLfloat* value);

	void faglUniformMatrix4fv(FAGLuniform location, GLsizei count, BOOLEAN transpose, const GLfloat* value);

	void faglUniformMatrix4fv(FAGLuniform location, BOOLEAN transpose, const GLfloat* value);

	void faglUniformMatrix4fv(FAGLuniform location, GLsizei count, const GLfloat* value);

	void faglUniformMatrix4fv(FAGLuniform location, const GLfloat* value);

	void faglUniformMatrix2x3fv(FAGLuniform location, GLsizei count, BOOLEAN transpose, const GLfloat* value);

	void faglUniformMatrix2x3fv(FAGLuniform location, BOOLEAN transpose, const GLfloat* value);

	void faglUniformMatrix2x3fv(FAGLuniform location, GLsizei count, const GLfloat* value);

	void faglUniformMatrix2x3fv(FAGLuniform location, const GLfloat* value);

	void faglUniformMatrix3x2fv(FAGLuniform location, GLsizei count, BOOLEAN transpose, const GLfloat* value);

	void faglUniformMatrix3x2fv(FAGLuniform location, BOOLEAN transpose, const GLfloat* value);

	void faglUniformMatrix3x2fv(FAGLuniform location, GLsizei count, const GLfloat* value);

	void faglUniformMatrix3x2fv(FAGLuniform location, const GLfloat* value);

	void faglUniformMatrix2x4fv(FAGLuniform location, GLsizei count, BOOLEAN transpose, const GLfloat* value);

	void faglUniformMatrix2x4fv(FAGLuniform location, BOOLEAN transpose, const GLfloat* value);

	void faglUniformMatrix2x4fv(FAGLuniform location, GLsizei count, const GLfloat* value);

	void faglUniformMatrix2x4fv(FAGLuniform location, const GLfloat* value);

	void faglUniformMatrix4x2fv(FAGLuniform location, GLsizei count, BOOLEAN transpose, const GLfloat* value);

	void faglUniformMatrix4x2fv(FAGLuniform location, BOOLEAN transpose, const GLfloat* value);

	void faglUniformMatrix4x2fv(FAGLuniform location, GLsizei count, const GLfloat* value);

	void faglUniformMatrix4x2fv(FAGLuniform location, const GLfloat* value);

	void faglUniformMatrix3x4fv(FAGLuniform location, GLsizei count, BOOLEAN transpose, const GLfloat* value);

	void faglUniformMatrix3x4fv(FAGLuniform location, BOOLEAN transpose, const GLfloat* value);

	void faglUniformMatrix3x4fv(FAGLuniform location, GLsizei count, const GLfloat* value);

	void faglUniformMatrix3x4fv(FAGLuniform location, const GLfloat* value);

	void faglUniformMatrix4x3fv(FAGLuniform location, GLsizei count, BOOLEAN transpose, const GLfloat* value);

	void faglUniformMatrix4x3fv(FAGLuniform location, BOOLEAN transpose, const GLfloat* value);

	void faglUniformMatrix4x3fv(FAGLuniform location, GLsizei count, const GLfloat* value);

	void faglUniformMatrix4x3fv(FAGLuniform location, const GLfloat* value);

	void faglDepthFunc(DEPTH_FUNC func);

	void faglBlendFunc(BLEND_FUNC sfactor, BLEND_FUNC dfactor);

	void faglBlendFunci(GLuint buf, BLEND_FUNC sfactor, BLEND_FUNC dfactor);

	void faglFramebufferTexture(FRAMEBUFFER_TEXTURE_TARGET target, FRAMEBUFFER_TEXTURE_ATTACHMENT attachment, FAGLtexture texture, GLint level);

	void faglFramebufferTexture(FRAMEBUFFER_TEXTURE_TARGET target, FRAMEBUFFER_TEXTURE_ATTACHMENT attachment, FAGLtexture texture);

	void faglFramebufferTexture(FRAMEBUFFER_TEXTURE_ATTACHMENT attachment, FAGLtexture texture, GLint level);

	void faglFramebufferTexture(FRAMEBUFFER_TEXTURE_ATTACHMENT attachment, FAGLtexture texture);

	void faglFramebufferTexture1D(FRAMEBUFFER_TEXTURE_TARGET target, FRAMEBUFFER_TEXTURE_ATTACHMENT attachment, FAGLtexture texture, GLint level);

	void faglFramebufferTexture1D(FRAMEBUFFER_TEXTURE_TARGET target, FRAMEBUFFER_TEXTURE_ATTACHMENT attachment, FAGLtexture texture);

	void faglFramebufferTexture1D( FRAMEBUFFER_TEXTURE_ATTACHMENT attachment, FAGLtexture texture, GLint level);

	void faglFramebufferTexture1D(FRAMEBUFFER_TEXTURE_ATTACHMENT attachment, FAGLtexture texture);

	void faglFramebufferTexture2D(FRAMEBUFFER_TEXTURE_TARGET target, FRAMEBUFFER_TEXTURE_ATTACHMENT attachment, FRAMEBUFFER_TEXTURE_2D_TEXTURE_TARGET textarget, FAGLtexture texture, GLint level);

	void faglFramebufferTexture2D(FRAMEBUFFER_TEXTURE_TARGET target, FRAMEBUFFER_TEXTURE_ATTACHMENT attachment, FRAMEBUFFER_TEXTURE_2D_TEXTURE_TARGET textarget, FAGLtexture texture);

	void faglFramebufferTexture2D(FRAMEBUFFER_TEXTURE_ATTACHMENT attachment, FRAMEBUFFER_TEXTURE_2D_TEXTURE_TARGET textarget, FAGLtexture texture, GLint level);

	void faglFramebufferTexture2D(FRAMEBUFFER_TEXTURE_ATTACHMENT attachment, FRAMEBUFFER_TEXTURE_2D_TEXTURE_TARGET textarget, FAGLtexture texture);
	
	void faglFramebufferTexture3D(FRAMEBUFFER_TEXTURE_TARGET target, FRAMEBUFFER_TEXTURE_ATTACHMENT attachment, FAGLtexture texture, GLint level, GLint layer);

	void faglFramebufferTexture3D(FRAMEBUFFER_TEXTURE_TARGET target, FRAMEBUFFER_TEXTURE_ATTACHMENT attachment, FAGLtexture texture, GLint layer);
	
	void faglFramebufferTexture3D(FRAMEBUFFER_TEXTURE_ATTACHMENT attachment, FAGLtexture texture, GLint level, GLint layer);

	void faglFramebufferTexture3D(FRAMEBUFFER_TEXTURE_ATTACHMENT attachment, FAGLtexture texture, GLint layer);

	void faglNamedFramebufferTexture(FAGLframebuffer framebuffer, FRAMEBUFFER_TEXTURE_ATTACHMENT attachment, FAGLtexture texture, GLint level);

	void faglNamedFramebufferTexture(FAGLframebuffer framebuffer, FRAMEBUFFER_TEXTURE_ATTACHMENT attachment, FAGLtexture texture);
}

#include "FAGL.inl"
#endif
